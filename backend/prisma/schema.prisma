// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int           @id @default(autoincrement())
  imageUrl              String?
  nickname              String?       @unique
  level                  Int           @default(1)
  isTwoFactor           Boolean       @default(false)
  twoFactorSecret       String?
  ftId                  String        @unique
  ftUsername            String?
  ftAccessToken         String?       @unique
  ftRefreshToken        String?       @unique
  ftAccessExpiresAt     DateTime?
  ftRefreshExpiresAt    DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?

  winLogs               GameResult[]  @relation("WinLog")
  loseLogs              GameResult[]  @relation("LoseLog")
  followers             FollowUser[]  @relation("Follower")
  followees             FollowUser[]  @relation("Followee")
  blockers              BlockUser[]   @relation("Blocker")
  blockeds              BlockUser[]   @relation("Blocked")
  channels              Channel_User[]
  achievements          Achievement_User[]
  messages              Message[]
}

model GameResult {
  id              Int       @id @default(autoincrement())
  isLadder        Boolean
  winnerId        Int
  loserId         Int
  winnerScore     Int
  loserScore      Int
  createdAt       DateTime  @default(now())

  winner          User      @relation("WinLog", fields: [winnerId], references: [id])
  loser           User      @relation("LoseLog", fields: [loserId], references: [id])
}

model FollowUser {
  @@id([followerId, followeeId], name: "id")

  followerId      Int
  followeeId      Int
  createdAt       DateTime  @default(now())

  follewer        User      @relation("Follower", fields: [followerId], references: [id])
  follewee        User      @relation("Followee", fields: [followeeId], references: [id])
}

model BlockUser {
  @@id([blockerId, blockedId], name: "id")

  blockerId       Int
  blockedId       Int
  createdAt       DateTime  @default(now())

  blocker         User      @relation("Blocker", fields: [blockerId], references: [id])
  blocked         User      @relation("Blocked", fields: [blockedId], references: [id])
}

model Channel {
  id              Int       @id @default(autoincrement())
  title           String?
  password        String?
  isPrivate       Boolean
  isDm            Boolean
  ownerId         Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?

  users           Channel_User[]
  messages        Message[]
}

model Channel_User {
  @@id([channelId, userId], name: "id")

  channelId       Int
  userId          Int
  createdAt       DateTime  @default(now())

  isAdmin         Boolean   @default(false)
  isBanned        Boolean   @default(false)

  channel         Channel   @relation(fields: [channelId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}

model Message {
  id              Int       @id @default(autoincrement())
  senderId        Int?
  channelId       Int
  text            String
  createdAt       DateTime  @default(now())

  sender          User?      @relation(fields: [senderId], references: [id])
  channel         Channel   @relation(fields: [channelId], references: [id])
}

model Achievement {
  id              Int       @id @default(autoincrement())
  name            String
  description     String

  users           Achievement_User[]
}

model Achievement_User {
  id              Int         @id @default(autoincrement())
  userId          Int
  achievementId   Int
  createdAt       DateTime    @default(now())

  achievement     Achievement @relation(fields: [achievementId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
}

